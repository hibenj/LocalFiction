//
// Created by marcel on 17.01.22.
//

#include "catch.hpp"
#include "utils/blueprints/layout_blueprints.hpp"
#include "utils/version_info.hpp"

#include <fiction/io/write_qll_layout.hpp>
#include <fiction/technology/cell_technologies.hpp>
#include <fiction/types.hpp>

#include <fmt/format.h>

#include <sstream>
#include <string>

using namespace fiction;

TEST_CASE("Write empty iNML layout", "[qll]")
{
    static const std::string qll_layout = fmt::format("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
                                                      "<!--Generated by {} ({})-->\n"
                                                      "<qcalayout>\n"
                                                      "\t<technologies>\n"
                                                      "\t\t<settings tech=\"iNML\">\n"
                                                      "\t\t\t<property name=\"Layoutwidth\" value=\"2\"/>\n"
                                                      "\t\t\t<property name=\"Layoutheight\" value=\"2\"/>\n"
                                                      "\t\t\t<property name=\"layersEnabled\" value=\"false\"/>\n"
                                                      "\t\t\t<property name=\"PhaseNumber\" value=\"4\"/>\n"
                                                      "\t\t\t<property name=\"CZSequence\" value=\"4\"/>\n"
                                                      "\t\t\t<property name=\"Width\" value=\"60\"/>\n"
                                                      "\t\t\t<property name=\"Height\" value=\"90\"/>\n"
                                                      "\t\t\t<property name=\"Thickness\" value=\"10\"/>\n"
                                                      "\t\t\t<property name=\"VDistance\" value=\"10\"/>\n"
                                                      "\t\t\t<property name=\"HDistance\" value=\"25\"/>\n"
                                                      "\t\t\t<property name=\"DWEnabled\" value=\"true\"/>\n"
                                                      "\t\t\t<property name=\"DWMaxSize\" value=\"6\"/>\n"
                                                      "\t\t\t<property name=\"DWDefSize\" value=\"2\"/>\n"
                                                      "\t\t\t<property name=\"InterlayerSpace\" value=\"10\"/>\n"
                                                      "\t\t</settings>\n"
                                                      "\t</technologies>\n"
                                                      "\t<components>\n"
                                                      "\t\t<item tech=\"iNML\" name=\"Magnet\"/>\n"
                                                      "\t\t<item tech=\"iNML\" name=\"Coupler\"/>\n"
                                                      "\t\t<item tech=\"iNML\" name=\"Cross Wire\"/>\n"
                                                      "\t\t<item tech=\"iNML\" name=\"And\"/>\n"
                                                      "\t\t<item tech=\"iNML\" name=\"Inverter\"/>\n"
                                                      "\t\t<item tech=\"iNML\" name=\"Or\"/>\n"
                                                      "\t</components>\n"
                                                      "\t<layout>\n"
                                                      "\t</layout>\n"
                                                      "</qcalayout>\n",
                                                      FICTION_VERSION, FICTION_REPO);

    std::ostringstream layout_stream{};

    const inml_cell_clk_lyt layout{{2, 2}, "empty layout"};

    write_qll_layout(layout, layout_stream);

    CHECK(layout_stream.str() == qll_layout);
}

TEST_CASE("Abort on non-pin iNML layouts", "[qll]")
{
    std::ostringstream layout_stream{};

    inml_cell_clk_lyt layout{{4, 4}, "Non-pin layout"};

    // add two normal cells to span a bounding boy
    layout.assign_cell_type({0, 0}, fiction::inml_technology::cell_type::NORMAL);
    layout.assign_cell_type({4, 4}, fiction::inml_technology::cell_type::NORMAL);

    // add I/O cells inside the bounding box such that they are not located at the borders
    layout.assign_cell_type({1, 1}, fiction::inml_technology::cell_type::INPUT);
    layout.assign_cell_type({2, 2}, fiction::inml_technology::cell_type::OUTPUT);

    // this layout should throw an exception
    CHECK_THROWS_AS(write_qll_layout(layout, layout_stream), std::invalid_argument);
}

TEST_CASE("Write single-layer iNML MAJ gate", "[qll]")
{
    static const std::string qll_layout =
        fmt::format("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
                    "<!--Generated by {} ({})-->\n"
                    "<qcalayout>\n"
                    "\t<technologies>\n"
                    "\t\t<settings tech=\"iNML\">\n"
                    "\t\t\t<property name=\"Layoutwidth\" value=\"4\"/>\n"
                    "\t\t\t<property name=\"Layoutheight\" value=\"4\"/>\n"
                    "\t\t\t<property name=\"layersEnabled\" value=\"false\"/>\n"
                    "\t\t\t<property name=\"PhaseNumber\" value=\"4\"/>\n"
                    "\t\t\t<property name=\"CZSequence\" value=\"4\"/>\n"
                    "\t\t\t<property name=\"Width\" value=\"60\"/>\n"
                    "\t\t\t<property name=\"Height\" value=\"90\"/>\n"
                    "\t\t\t<property name=\"Thickness\" value=\"10\"/>\n"
                    "\t\t\t<property name=\"VDistance\" value=\"10\"/>\n"
                    "\t\t\t<property name=\"HDistance\" value=\"25\"/>\n"
                    "\t\t\t<property name=\"DWEnabled\" value=\"true\"/>\n"
                    "\t\t\t<property name=\"DWMaxSize\" value=\"6\"/>\n"
                    "\t\t\t<property name=\"DWDefSize\" value=\"2\"/>\n"
                    "\t\t\t<property name=\"InterlayerSpace\" value=\"10\"/>\n"
                    "\t\t</settings>\n"
                    "\t</technologies>\n"
                    "\t<components>\n"
                    "\t\t<item tech=\"iNML\" name=\"Magnet\"/>\n"
                    "\t\t<item tech=\"iNML\" name=\"Coupler\"/>\n"
                    "\t\t<item tech=\"iNML\" name=\"Cross Wire\"/>\n"
                    "\t\t<item tech=\"iNML\" name=\"And\"/>\n"
                    "\t\t<item tech=\"iNML\" name=\"Inverter\"/>\n"
                    "\t\t<item tech=\"iNML\" name=\"Or\"/>\n"
                    "\t</components>\n"
                    "\t<layout>\n"
                    "\t\t<item comp=\"0\" id=\"1\" x=\"0\" y=\"0\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<item comp=\"0\" id=\"2\" x=\"1\" y=\"0\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<item comp=\"0\" id=\"3\" x=\"2\" y=\"0\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<item comp=\"0\" id=\"4\" x=\"2\" y=\"1\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<item comp=\"0\" id=\"5\" x=\"0\" y=\"2\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<item comp=\"0\" id=\"6\" x=\"1\" y=\"2\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<item comp=\"0\" id=\"7\" x=\"2\" y=\"2\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<item comp=\"0\" id=\"8\" x=\"3\" y=\"2\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<item comp=\"0\" id=\"9\" x=\"4\" y=\"2\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<item comp=\"0\" id=\"10\" x=\"2\" y=\"3\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<item comp=\"0\" id=\"11\" x=\"0\" y=\"4\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<item comp=\"0\" id=\"12\" x=\"1\" y=\"4\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<item comp=\"0\" id=\"13\" x=\"2\" y=\"4\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<pin tech=\"iNML\" name=\"a\" direction=\"0\" id=\"14\" x=\"0\" y=\"0\" layer=\"0\"/>\n"
                    "\t\t<pin tech=\"iNML\" name=\"b\" direction=\"0\" id=\"15\" x=\"0\" y=\"2\" layer=\"0\"/>\n"
                    "\t\t<pin tech=\"iNML\" name=\"c\" direction=\"0\" id=\"16\" x=\"0\" y=\"4\" layer=\"0\"/>\n"
                    "\t\t<pin tech=\"iNML\" name=\"f\" direction=\"1\" id=\"17\" x=\"4\" y=\"2\" layer=\"0\"/>\n"
                    "\t</layout>\n"
                    "</qcalayout>\n",
                    FICTION_VERSION, FICTION_REPO);

    std::ostringstream layout_stream{};

    const auto layout = blueprints::single_layer_inml_maj_gate<inml_cell_clk_lyt>();

    write_qll_layout(layout, layout_stream);

    CHECK(layout_stream.str() == qll_layout);
}

TEST_CASE("Write single-layer iNML coupler with inverter magnet", "[qll]")
{
    static const std::string qll_layout =
        fmt::format("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
                    "<!--Generated by {} ({})-->\n"
                    "<qcalayout>\n"
                    "\t<technologies>\n"
                    "\t\t<settings tech=\"iNML\">\n"
                    "\t\t\t<property name=\"Layoutwidth\" value=\"11\"/>\n"
                    "\t\t\t<property name=\"Layoutheight\" value=\"4\"/>\n"
                    "\t\t\t<property name=\"layersEnabled\" value=\"false\"/>\n"
                    "\t\t\t<property name=\"PhaseNumber\" value=\"4\"/>\n"
                    "\t\t\t<property name=\"CZSequence\" value=\"4\"/>\n"
                    "\t\t\t<property name=\"Width\" value=\"60\"/>\n"
                    "\t\t\t<property name=\"Height\" value=\"90\"/>\n"
                    "\t\t\t<property name=\"Thickness\" value=\"10\"/>\n"
                    "\t\t\t<property name=\"VDistance\" value=\"10\"/>\n"
                    "\t\t\t<property name=\"HDistance\" value=\"25\"/>\n"
                    "\t\t\t<property name=\"DWEnabled\" value=\"true\"/>\n"
                    "\t\t\t<property name=\"DWMaxSize\" value=\"6\"/>\n"
                    "\t\t\t<property name=\"DWDefSize\" value=\"2\"/>\n"
                    "\t\t\t<property name=\"InterlayerSpace\" value=\"10\"/>\n"
                    "\t\t</settings>\n"
                    "\t</technologies>\n"
                    "\t<components>\n"
                    "\t\t<item tech=\"iNML\" name=\"Magnet\"/>\n"
                    "\t\t<item tech=\"iNML\" name=\"Coupler\"/>\n"
                    "\t\t<item tech=\"iNML\" name=\"Cross Wire\"/>\n"
                    "\t\t<item tech=\"iNML\" name=\"And\"/>\n"
                    "\t\t<item tech=\"iNML\" name=\"Inverter\"/>\n"
                    "\t\t<item tech=\"iNML\" name=\"Or\"/>\n"
                    "\t</components>\n"
                    "\t<layout>\n"
                    "\t\t<item comp=\"1\" id=\"1\" x=\"3\" y=\"0\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<item comp=\"0\" id=\"2\" x=\"5\" y=\"0\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<item comp=\"0\" id=\"3\" x=\"6\" y=\"0\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<item comp=\"4\" id=\"4\" x=\"7\" y=\"0\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t\t<property name=\"length\" value=\"4\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<item comp=\"0\" id=\"5\" x=\"11\" y=\"0\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<item comp=\"0\" id=\"6\" x=\"0\" y=\"1\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<item comp=\"0\" id=\"7\" x=\"1\" y=\"1\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<item comp=\"0\" id=\"8\" x=\"2\" y=\"1\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<item comp=\"0\" id=\"9\" x=\"5\" y=\"2\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<item comp=\"0\" id=\"10\" x=\"6\" y=\"2\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<item comp=\"0\" id=\"11\" x=\"7\" y=\"2\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<item comp=\"0\" id=\"12\" x=\"8\" y=\"2\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<item comp=\"0\" id=\"13\" x=\"9\" y=\"2\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<item comp=\"0\" id=\"14\" x=\"10\" y=\"2\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<item comp=\"0\" id=\"15\" x=\"11\" y=\"2\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<pin tech=\"iNML\" name=\"a\" direction=\"0\" id=\"16\" x=\"0\" y=\"1\" layer=\"0\"/>\n"
                    "\t\t<pin tech=\"iNML\" name=\"not a\" direction=\"1\" id=\"17\" x=\"11\" y=\"0\" layer=\"0\"/>\n"
                    "\t\t<pin tech=\"iNML\" name=\"a\" direction=\"1\" id=\"18\" x=\"11\" y=\"2\" layer=\"0\"/>\n"
                    "\t</layout>\n"
                    "</qcalayout>\n",
                    FICTION_VERSION, FICTION_REPO);

    std::ostringstream layout_stream{};

    const auto layout = blueprints::single_layer_inml_coupler_with_inverter<inml_cell_clk_lyt>();

    write_qll_layout(layout, layout_stream);

    CHECK(layout_stream.str() == qll_layout);
}

TEST_CASE("Write single-layer iNML crosswire", "[qll]")
{
    static const std::string qll_layout =
        fmt::format("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
                    "<!--Generated by {} ({})-->\n"
                    "<qcalayout>\n"
                    "\t<technologies>\n"
                    "\t\t<settings tech=\"iNML\">\n"
                    "\t\t\t<property name=\"Layoutwidth\" value=\"5\"/>\n"
                    "\t\t\t<property name=\"Layoutheight\" value=\"2\"/>\n"
                    "\t\t\t<property name=\"layersEnabled\" value=\"false\"/>\n"
                    "\t\t\t<property name=\"PhaseNumber\" value=\"4\"/>\n"
                    "\t\t\t<property name=\"CZSequence\" value=\"4\"/>\n"
                    "\t\t\t<property name=\"Width\" value=\"60\"/>\n"
                    "\t\t\t<property name=\"Height\" value=\"90\"/>\n"
                    "\t\t\t<property name=\"Thickness\" value=\"10\"/>\n"
                    "\t\t\t<property name=\"VDistance\" value=\"10\"/>\n"
                    "\t\t\t<property name=\"HDistance\" value=\"25\"/>\n"
                    "\t\t\t<property name=\"DWEnabled\" value=\"true\"/>\n"
                    "\t\t\t<property name=\"DWMaxSize\" value=\"6\"/>\n"
                    "\t\t\t<property name=\"DWDefSize\" value=\"2\"/>\n"
                    "\t\t\t<property name=\"InterlayerSpace\" value=\"10\"/>\n"
                    "\t\t</settings>\n"
                    "\t</technologies>\n"
                    "\t<components>\n"
                    "\t\t<item tech=\"iNML\" name=\"Magnet\"/>\n"
                    "\t\t<item tech=\"iNML\" name=\"Coupler\"/>\n"
                    "\t\t<item tech=\"iNML\" name=\"Cross Wire\"/>\n"
                    "\t\t<item tech=\"iNML\" name=\"And\"/>\n"
                    "\t\t<item tech=\"iNML\" name=\"Inverter\"/>\n"
                    "\t\t<item tech=\"iNML\" name=\"Or\"/>\n"
                    "\t</components>\n"
                    "\t<layout>\n"
                    "\t\t<item comp=\"0\" id=\"1\" x=\"0\" y=\"0\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<item comp=\"2\" id=\"2\" x=\"1\" y=\"0\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<item comp=\"0\" id=\"3\" x=\"4\" y=\"0\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<item comp=\"0\" id=\"4\" x=\"5\" y=\"0\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<item comp=\"0\" id=\"5\" x=\"0\" y=\"2\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<item comp=\"0\" id=\"6\" x=\"4\" y=\"2\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<item comp=\"0\" id=\"7\" x=\"5\" y=\"2\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<pin tech=\"iNML\" name=\"a\" direction=\"0\" id=\"8\" x=\"0\" y=\"0\" layer=\"0\"/>\n"
                    "\t\t<pin tech=\"iNML\" name=\"b\" direction=\"0\" id=\"9\" x=\"0\" y=\"2\" layer=\"0\"/>\n"
                    "\t\t<pin tech=\"iNML\" name=\"b'\" direction=\"1\" id=\"10\" x=\"5\" y=\"0\" layer=\"0\"/>\n"
                    "\t\t<pin tech=\"iNML\" name=\"a'\" direction=\"1\" id=\"11\" x=\"5\" y=\"2\" layer=\"0\"/>\n"
                    "\t</layout>\n"
                    "</qcalayout>\n",
                    FICTION_VERSION, FICTION_REPO);

    std::ostringstream layout_stream{};

    const auto layout = blueprints::single_layer_inml_crosswire<inml_cell_clk_lyt>();

    write_qll_layout(layout, layout_stream);

    CHECK(layout_stream.str() == qll_layout);
}

TEST_CASE("Write empty mQCA layout", "[qll]")
{
    static const std::string qll_layout =
        fmt::format("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
                    "<!--Generated by {} ({})-->\n"
                    "<qcalayout>\n"
                    "\t<technologies>\n"
                    "\t\t<settings tech=\"MolQCA\">\n"
                    "\t\t\t<property name=\"Layoutwidth\" value=\"2\"/>\n"
                    "\t\t\t<property name=\"Layoutheight\" value=\"2\"/>\n"
                    "\t\t\t<property name=\"layersEnabled\" value=\"true\"/>\n"
                    "\t\t\t<property name=\"PhaseNumber\" value=\"4\"/>\n"
                    "\t\t\t<property name=\"CZSequence\" value=\"4\"/>\n"
                    "\t\t\t<property name=\"Intermolecular Distance\" value=\"1000\"/>\n"
                    "\t\t</settings>\n"
                    "\t</technologies>\n"
                    "\t<components>\n"
                    "\t\t<item tech=\"MolQCA\" name=\"Bisferrocene\"/>\n"
                    "\t</components>\n"
                    "\t<layout>\n"
                    "\t</layout>\n"
                    "</qcalayout>\n",
                    FICTION_VERSION, FICTION_REPO);

    std::ostringstream layout_stream{};

    const qca_cell_clk_lyt layout{{2, 2, 1}, "empty layout"};

    write_qll_layout(layout, layout_stream);

    CHECK(layout_stream.str() == qll_layout);
}

TEST_CASE("Write single-layer mQCA AND gate", "[qll]")
{
    static const std::string qll_layout =
        fmt::format("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
                    "<!--Generated by {} ({})-->\n"
                    "<qcalayout>\n"
                    "\t<technologies>\n"
                    "\t\t<settings tech=\"MolQCA\">\n"
                    "\t\t\t<property name=\"Layoutwidth\" value=\"4\"/>\n"
                    "\t\t\t<property name=\"Layoutheight\" value=\"4\"/>\n"
                    "\t\t\t<property name=\"layersEnabled\" value=\"false\"/>\n"
                    "\t\t\t<property name=\"PhaseNumber\" value=\"4\"/>\n"
                    "\t\t\t<property name=\"CZSequence\" value=\"4\"/>\n"
                    "\t\t\t<property name=\"Intermolecular Distance\" value=\"1000\"/>\n"
                    "\t\t</settings>\n"
                    "\t</technologies>\n"
                    "\t<components>\n"
                    "\t\t<item tech=\"MolQCA\" name=\"Bisferrocene\"/>\n"
                    "\t</components>\n"
                    "\t<layout>\n"
                    "\t\t<pin tech=\"MolQCA\" name=\"const0\" direction=\"0\" id=\"1\" x=\"2\" y=\"0\" layer=\"0\"/>\n"
                    "\t\t<item comp=\"0\" id=\"2\" x=\"2\" y=\"1\" layer=\"0\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<item comp=\"0\" id=\"3\" x=\"1\" y=\"2\" layer=\"0\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<item comp=\"0\" id=\"4\" x=\"2\" y=\"2\" layer=\"0\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<item comp=\"0\" id=\"5\" x=\"3\" y=\"2\" layer=\"0\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<item comp=\"0\" id=\"6\" x=\"2\" y=\"3\" layer=\"0\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<pin tech=\"MolQCA\" name=\"a\" direction=\"0\" id=\"7\" x=\"0\" y=\"2\" layer=\"0\"/>\n"
                    "\t\t<pin tech=\"MolQCA\" name=\"b\" direction=\"0\" id=\"8\" x=\"2\" y=\"4\" layer=\"0\"/>\n"
                    "\t\t<pin tech=\"MolQCA\" name=\"f\" direction=\"1\" id=\"9\" x=\"4\" y=\"2\" layer=\"0\"/>\n"
                    "\t</layout>\n"
                    "</qcalayout>\n",
                    FICTION_VERSION, FICTION_REPO);

    std::ostringstream layout_stream{};

    const auto layout = blueprints::single_layer_qca_and_gate<qca_cell_clk_lyt>();

    write_qll_layout(layout, layout_stream);

    CHECK(layout_stream.str() == qll_layout);
}

TEST_CASE("Write dual-layer mQCA crossover", "[qll]")
{
    static const std::string qll_layout =
        fmt::format("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
                    "<!--Generated by {} ({})-->\n"
                    "<qcalayout>\n"
                    "\t<technologies>\n"
                    "\t\t<settings tech=\"MolQCA\">\n"
                    "\t\t\t<property name=\"Layoutwidth\" value=\"4\"/>\n"
                    "\t\t\t<property name=\"Layoutheight\" value=\"4\"/>\n"
                    "\t\t\t<property name=\"layersEnabled\" value=\"true\"/>\n"
                    "\t\t\t<property name=\"PhaseNumber\" value=\"4\"/>\n"
                    "\t\t\t<property name=\"CZSequence\" value=\"4\"/>\n"
                    "\t\t\t<property name=\"Intermolecular Distance\" value=\"1000\"/>\n"
                    "\t\t</settings>\n"
                    "\t</technologies>\n"
                    "\t<components>\n"
                    "\t\t<item tech=\"MolQCA\" name=\"Bisferrocene\"/>\n"
                    "\t</components>\n"
                    "\t<layout>\n"
                    "\t\t<item comp=\"0\" id=\"1\" x=\"2\" y=\"1\" layer=\"0\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<item comp=\"0\" id=\"2\" x=\"0\" y=\"2\" layer=\"1\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<item comp=\"0\" id=\"3\" x=\"2\" y=\"2\" layer=\"0\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<item comp=\"0\" id=\"4\" x=\"4\" y=\"2\" layer=\"1\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<item comp=\"0\" id=\"5\" x=\"2\" y=\"3\" layer=\"0\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<item comp=\"0\" id=\"6\" x=\"0\" y=\"2\" layer=\"2\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<item comp=\"0\" id=\"7\" x=\"1\" y=\"2\" layer=\"2\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<item comp=\"0\" id=\"8\" x=\"2\" y=\"2\" layer=\"2\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<item comp=\"0\" id=\"9\" x=\"3\" y=\"2\" layer=\"2\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<item comp=\"0\" id=\"10\" x=\"4\" y=\"2\" layer=\"2\">\n"
                    "\t\t\t<property name=\"phase\" value=\"0\"/>\n"
                    "\t\t</item>\n"
                    "\t\t<pin tech=\"MolQCA\" name=\"b\" direction=\"0\" id=\"11\" x=\"2\" y=\"0\" layer=\"0\"/>\n"
                    "\t\t<pin tech=\"MolQCA\" name=\"a\" direction=\"0\" id=\"12\" x=\"0\" y=\"2\" layer=\"0\"/>\n"
                    "\t\t<pin tech=\"MolQCA\" name=\"a'\" direction=\"1\" id=\"13\" x=\"4\" y=\"2\" layer=\"0\"/>\n"
                    "\t\t<pin tech=\"MolQCA\" name=\"b'\" direction=\"1\" id=\"14\" x=\"2\" y=\"4\" layer=\"0\"/>\n"
                    "\t</layout>\n"
                    "</qcalayout>\n",
                    FICTION_VERSION, FICTION_REPO);

    std::ostringstream layout_stream{};

    const auto layout = blueprints::two_layer_qca_wire_crossing<qca_cell_clk_lyt>();

    write_qll_layout(layout, layout_stream);

    CHECK(layout_stream.str() == qll_layout);
}
